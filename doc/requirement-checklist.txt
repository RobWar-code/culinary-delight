Requirements CheckList 

* indicates fulfilled

LO1 	* Design an interactive Front-End web application using HTML and CSS and JavaScript based 
        on the principles of user experience design, accessibility and responsivity
LO2 	Test a front-end web application through the * development, * implementation and deployment stages
LO3 	Deploy a Front-End web application to a Cloud platform
LO4 	Maximise future maintainability through documentation, code structure and organisation
LO5 	Demonstrate and document the development process through a version control system such as GitHub
LO6 	* Implement Front-End interactivity, using * core JavaScript, JavaScript libraries or frameworks
All Pass criteria must be achieved for a pass to be awarded.

LO1 Design an interactive Front-End web application using HTML and CSS and JavaScript based on the principles of user experience design, accessibility and responsivity
1.1 	* Design a web application that meets accessibility guidelines, follows the principles of UX design 
        and presents a structured layout and navigation model, and meets its given purpose
1.2 	* Design a website that meets accessibility guidelines (e.g. contrast between background and 
        foreground colours to cater for the visually impaired) Optionally, add alt text for non-text elements
1.3 	* Design the organisation of information on the page following the principles of user experience design 
        (headers are used to convey structure, information is easy to find due to being presented and 
        categorised in terms of priority)
1.4 	* Ensure that foreground information is never distracted by backgrounds
1.5 	* Include graphics that are consistent in style and colour
1.6 	* Design interactivity for a web application that lets the user initiate and control actions, 
        and gives feedback
1.7 	* Write custom JavaScript, HTML and CSS code to create a responsive front-end web application 
        consisting of one or more HTML pages with significant interactive functionality
1.8 	* Write JavaScript code to produce relevant responses to user actions
1.9 	* Implement an interactive web application that incorporates images or graphics of usable resolution, 
            legible, unobscured text, consistent styling, undistracted foregrounds

LO2 Test a front-end web application through the development, implementation and deployment stages
2.1 	Write JavaScript code that passes through a linter (e.g. Jshint) with no significant issues.
2.2 	Write custom HTML code that passes through the official W3C validator with no issues.
2.3 	Write custom CSS code that passes through the official (Jigsaw) validator with no issues
2.4 	* Code all external links to open in a separate tab when clicked
2.5 	* Use CSS media queries across the application to ensure the layout changes 
        appropriately and maintains the page's structural integrity across device screen sizes.
2.6 	* Use Semantic markup to structure HTML code
2.7 	* Present the finished website with clearly understandable site-specific content, 
        rather than Lorem Ipsum placeholder text
2.8 	* If used, implement clear navigation to allow users to find resources on the site intuitively.

LO3 Deploy a Front-End web application to a Cloud platform
3.1 	Deploy a final version of the code to a cloud-based hosting platform (e.g. GitHub Pages) and test to ensure it matches the development version
3.3 	Use Git & GitHub for version control of an interactive web application up to deployment.
3.4 	Remove commented-out code before pushing final changes to version control and deploying.
3.5 	Ensure that there are no broken internal links

LO4 Maximise future maintainability through documentation, code structure and organisation
4.1 	Write a README.md file for the web application that explains its purpose, the value that 
        it provides to its users, and the deployment procedure.
4.2 	Insert screenshots of the project features, give a brief description of what each feature 
        does and explain its value to the user.
4.3 	* Attribute all code from external sources to its original source via comments above the code 
        and (for larger dependencies) in the README.
4.4 	* Clearly separate and identify code written for the website and code from external sources 
        (e.g. libraries or tutorials)
4.5 	* Organise HTML, CSS and JavaScript code into well-defined and commented sections
4.6 	* Place CSS code in external files linked to the HTML page in the HEAD element.
4.7 	* Place JavaScript code in external files linked to the HTML page just above the closing body tag.
4.8 	* Write code that meets at least minimum standards for readability (consistent indentation, 
        blank lines only appear individually or, at most, in pairs)
4.9 	* Name files consistently and descriptively, without spaces or capitalisation to allow 
        for cross-platform compatibility.
4.1 	* Group files in directories by file type (e.g. an assets directory will contain all static 
        files and may be organised into sub-directories such as CSS, images, etc.)

LO5 Demonstrate and document the development process through a version control system such as GitHub
5.1 	* Use consistent and effective markdown formatting that is well-structured, easy to follow, 
        and has few grammatical errors, when writing a README file.

LO6 Implement Front-End interactivity, using core JavaScript, JavaScript libraries or frameworks
6.1 	* Write JavaScript functions that correctly implement compound statements, 
        such as if conditions and loops.
6.2 	* Write code that intelligently handles empty or invalid input data.
6.3 	* Implement appropriate working functionality for all project requirements.
6.4 	* Write code that does not generate internal errors on the page or in the console due to user actions.
6.5 	* Organise code and assets files in directories by file type.
All Pass criteria must be achieved for a pass to be awarded.

It is expected that project work submitted for this module will demonstrate the same knowledge and 
skills shown in HTML/CSS/JavaScript Essentials across the grading levels. 
The learner demonstrates characteristics of higher-level performance as described below.
Merit Performance

To evidence performance at the MERIT level, a learner will, in general, demonstrate characteristics 
of performance at the MERIT level, as suggested below. However, the learner must achieve ALL listed merit criteria.

The learner has a clear rationale for developing this project and has produced a fully functioning, well-documented, interactive web application for a real-life audience, with specific content rather than placeholders. There is a range of interactive features. Data validation and user feedback are all evident in the code and the working application. There are no logical errors in the code, and the application functions as expected.
1.1 	* Design a website with a flow of information layout and interaction feedback that is clear and unambiguous
1.2 	* Implement a web application whose purpose is immediately evident to a new user
1.3 	* Implement a website that provides an excellent solution to the key project goals, demands and expectations.
2.1 	* Document any bugs found and their fixes and explanation of any bugs that are left unfixed.
3.1 	* Commit often for each feature/fix, ensuring that commits are small, well-defined and have clear, 
            descriptive messages
4.1 	* Present a clear rationale for the development of the project, in the README, - Key project goals, 
        target audience
5.1 	* Document the deployment procedure in a section in a README file, written using consistent and 
        effective markdown formatting that is well-structured, easy to follow, and has few grammatical errors
6.1 	* Design a web application that lets the user initiate and control actions and gives feedback

All Merit criteria must be achieved for merit to be awarded.

Distinction Performance

At this level, a learner will have achieved all pass and merit criteria, as described above, and will demonstrate 
characteristics of high-level performance as described below:

Characteristics of performance at DISTINCTION level:

* The learner has documented a clear, justified rationale for a real-world application. The development of the 
project has resulted in a fully-functioning, interactive web application.

* The finished project is judged to be publishable in its current form with an evidenced professional-grade 
user interface and interaction adhering to current practice. * There are no logic errors in the code. 
N/A Where there is a clear breach of accepted design/UX principles or accepted good practice in code organisation, 
these are fully justified, appropriate and acceptable to the target user. * It matches the design and demonstrates 
the characteristics of craftsmanship in the code. * The resulting application is original and not a copy of any 
walkthrough projects encountered in the unit

Amplification (craftsmanship):

Design

The design of the web application demonstrates the main principles of good UX design:

Information Hierarchy

    * semantic markup is used to convey structure - all information displayed on the site is presented in 
    an organised fashion, with each piece of information being easy to find
    all resources on the site are easy to find, allowing users to navigate the layout of the site intuitively
    information is presented and categorised in terms of its priority

User Control

    * all interaction with the site would be likely to produce a positive emotional response within the user. 
    This is down to the flow of information layout, use of colour, clear and unambiguous navigation structures and 
    all interaction feedback when displaying media files, the site avoids aggressive automatic pop-ups and 
    autoplay of audio; instead letting the user initiate and control such actions the user is shown progress 
    indicators where relevant errors resulting from user actions are reported to the user

Consistency

    * evident across all pages/sections and covers interactivity as well as design

Confirmation

    * user actions are confirmed where appropriate, feedback is given at all times

Accessibility

    * there is evident conformity to accessibility guidelines across all pages/sections and in all interactivity

    * Any design decisions that contravene accepted user interaction, user experience design principles are 
    identified and described (comments in code or a section in the README)

Development and Implementation

Code demonstrates the characteristics of ‘clean code’:

* Consistent and appropriate naming conventions within code and in file naming, e.g.

    file names, class name, function names and variable names are descriptive and consistent
    for cross-platform compatibility, file and directory names will not have spaces in them and will be lower-case only
    all HTML attributes, CSS rules, code variables and function names are consistent in format, follow standards for the language and are appropriate and meaningful

* File structure

    whenever relevant, files are grouped in directories by file type (e.g. an assets directory will contain all static files, and code may be organised into sub-directories such as css, js, etc.)
    there is a clear separation between custom code and any external files (for example, library files are all inside a directory named 'libraries')
    files are named consistently and descriptively, without spaces or capitalisation to allow for cross-platform compatibility.

Readability

    * code is indented in a consistent manner to ease readability, and there are no unnecessary 
    repeated blank lines (and never more than 2)
    * id/class(CSS and JavaScript)/function/variable names clearly indicate their purpose
    * all code is split into well-defined and commented sections
    * semantic markup is used to structure HTML code
    * HTML, CSS and Javascript are kept in separate, linked files
    * CSS files are linked to in the HTML file’s head element
    * non-trivial Javascript code files are linked to at the bottom of the 
    body element (or bottom of the head element if needs loaded before the body HTML)

Defensive design

    * all input data is validated (e.g. presence check, format check, range check)
        Internal errors are handled gracefully, and users are notified of the problem where appropriate.

Comments

    * all custom code files include clear and relevant comments explaining the purpose of code segments

Compliant code

    HTML code passes through the official W3C validator with no issues
    CSS code passes through the official (Jigsaw) validator with no issues
    JavaScript code passes through a linter (e.g. jshint.com) with no significant issues

Robust code

    * no logic errors are found when running code
    * errors caused by user actions are handled
    * where used, API calls that fail to execute or return data will be handled gracefully, 
    with the site users notified in an obvious way
    * inputs are validated when necessary.
    navigating between pages via the back/forward buttons can never break the site. There are no broken links
    * user actions do not cause internal errors on the page or in the console

* The entire design is implemented, providing an excellent solution to the users' demands
and expectations.

Real-world application

    * Understandable site-specific content is used rather than Lorem Ipsum placeholder text
    * All links to external pages open in a separate tab when clicked
    * The final application is aligned to the critical project needs and user expectations

Version control systems are used effectively.

    * all code is managed in git with commit messages that reflect the specific reason for the commit
    * there is a separate, well-defined commit for each individual feature/fix
    * there are no very large commits which make it harder to understand the development process and 
        could lead the assessor to suspect plagiarism

The entire application development process is documented:

    * the purpose of the application is clearly described in the README
    * there is a clear separation between code written by the learner and code from external 
    sources (e.g. libraries or tutorials). All code from external sources is attributed to its source 
    via comments above the code and (for more extensive dependencies) in the README
    the deployment procedure is fully documented in a section in the README file
    clear, well-described, explanatory commit messages describe the development process
    the README is well-structured and easy to follow
    the README file is written in markdown and uses markdown formatting consistently and effectively
    * The application’s user interface has few errors in spelling and grammar



README

Recommended structure for a README.md file:


As a mandatory part of the submission, your project must have a readme file named README.md, in markdown format, that will describe all aspects of your project.

The link below provides an official example of an expected structure for your readme file

Example README.md template

NOTE:

While it is a requirement for your README to be in English, we also strongly recommend that your site is in 
English too. The assessment will be conducted in English so to ensure that the functionality and navigation 
can be fully assessed, we recommend that the site is in English. If the site is in a language other than 
English, at a very minimum you should ensure you have correctly set the lang attribute in the HTML to the 
character code of the web apps content language. This will allow the browser to attempt a translation into English.
Plagiarism

Plagiarism, as defined by the Oxford dictionary is “the practice of taking someone else's work or 
ideas and passing them off as one's own.” It is a serious academic offence for which there are serious consequences.

It is acceptable to use and reference others’ code however it is an academic plagiarism offence 
if any piece of work which is not entirely the student’s own is not correctly referenced or acknowledged.
 All student projects submitted will be reviewed for plagiarism. This includes checking code comparison tools, 
 plagiarism software, review of git commit history and other mechanisms.

* It is the responsibility of each student to ensure that any direct or indirect inclusion 
of the work of others is fully and adequately acknowledged. We appreciate that plagiarism 
may be unintentional however it will still be treated as an offence. The Tutoring team can answer 
any plagiarism related queries, but as a general rule, if in doubt, include attribution of all sources.

Students are encouraged to ask mentors, tutors and their peers for advice about their project work 
but any submission should not include any code written by others, unless it is explicitly credited to them. 
Failure to correctly credit code that a student hasn’t created themselves will be considered plagiarism and 
will result in a failing grade. Blatant or repeat offences of plagiarism will not be tolerated and will 
result in stringent penalties being applied, including removal from the course. 